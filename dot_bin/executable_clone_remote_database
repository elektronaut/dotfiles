#!/Usr/bin/env ruby

require "yaml"

environment = ARGV.first || "production"
deploy_file = "config/deploy/#{environment}.rb"
cap2_deploy_file = "config/deploy.rb"
database_file = "config/database.yml"

if !File.exist?(database_file)
  puts "ERROR: Cannot find #{database_file}"
  exit
end

if File.exist?(deploy_file)
  remote_host = File.read(deploy_file).match(/server\s+['"]([^'"]*)/)[1]
elsif File.exist?(cap2_deploy_file)
  puts "Warning: couldn't find #{deploy_file}, falling back to #{cap2_deploy_file}"
  remote_host = File.read(cap2_deploy_file).match(/^\s*set\s+:remote_host,\s*['"]([^'"]*)/)[1]
else
  puts "ERROR: Cannot find #{deploy_file} or #{cap2_deploy_file}"
  exit
end

db_config = YAML.load_file(database_file)
adapter = db_config[environment]["adapter"]
remote_database = db_config[environment]["database"]
local_database = db_config["development"]["database"]

puts "Cloning #{remote_host}/#{remote_database} to localhost/#{local_database} using #{adapter}..."

if adapter =~ /^mysql/
  mysql_remote_user = ENV["MYSQL_REMOTE_USER"]
  mysql_remote_password = ENV["MYSQL_REMOTE_PASSWORD"]
  unless mysql_remote_user && mysql_remote_password
    puts "ERROR: MYSQL_REMOTE_USER and MYSQL_REMOTE_PASSWORD not set."
    exit
  end

  `ssh #{remote_host} "mysqldump --add-drop-table --single-transaction --allow-keywords --add-drop-table --single-transaction --allow-keywords -u #{mysql_remote_user} -p#{mysql_remote_password} -h 127.0.0.1 --max_allowed_packet=100M #{remote_database}" | mysql -u root #{local_database}`
elsif adapter =~ /^postgres/
  `ssh #{remote_host} "pg_dump -c --no-owner #{remote_database}" | psql #{local_database}`
end
